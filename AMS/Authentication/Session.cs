using AMS.Models;
using System.Security.Principal;
using AMS.ConfigurationHandler;
using AMS.Database.Repositories;
using AMS.Database.Repositories.Interfaces;
using AMS.ViewModels;
using System;

namespace AMS.Authentication
{
    public class Session
    {
        public User user;
        public string Username { get => GetIdentity().Split('\\')[1]; }
        public string Domain { get => GetIdentity().Split('\\')[0]; }

        private static string _dbKey = "";

        public Session(IUserRepository repository) => user = repository.GetByIdentity(GetIdentity());

        public bool Authenticated()
        {
            if (user != null)
                return true;
            else
            {
                // Check if database is empty
                UserRepository rep = new UserRepository();
                if (rep.GetCount(null) == 0)
                {
                    // Create the new user and give it admin rights.

                    User user = new User()
                    {
                        Username = this.Username,
                        Domain = this.Domain,
                        IsAdmin = true,
                        Description = "The very first user on the system. This user was autogenerated",
                        IsEnabled = true
                    };

                    // Insert it into the database
                    ulong id;
                    rep.Insert(user, out id);
                    this.user = rep.GetById(id);

                    return true;
                }
                else
                    return false;
            }
        }
        
        public bool IsAdmin() => user.IsAdmin;
        
        public static string GetIdentity() => WindowsIdentity.GetCurrent().Name;
        
        public static string GetDBKey()
        {
            if (string.IsNullOrEmpty(_dbKey))
            {
                FileConfigurationHandler fileConfigurationHandler = new FileConfigurationHandler(Features.GetCurrentSession());
                _dbKey = fileConfigurationHandler.GetConfigValue();
            }
            return _dbKey;
        }

        public static void ClearDBKey()
        {
            _dbKey = String.Empty;
        }
    }
}
