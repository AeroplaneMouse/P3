using AMS.Models;
using System.Security.Principal;
using AMS.ConfigurationHandler;
using AMS.Database.Repositories.Interfaces;
using AMS.ViewModels;
using System;

namespace AMS.Authentication
{
    public class Session
    {
        private static string _dbKey = "";
        
        public User User;
        public Session(IUserRepository repository)
        {
            if (repository == null)
                throw new ArgumentNullException(nameof(repository));
                
            User = repository.GetByIdentity(GetIdentity());
        }

        /// <summary>
        /// Checks wether a user is allowd access to the system, by comparing the current user
        /// with users in the database. If the database contains no users, a new users is created and given admin permissions
        /// </summary>
        /// <returns>Wether or not the current user was allowed to use the system</returns>
        public bool Authenticated()
        {
            // If user is not null, it is in the database and have access.
            if (User != null)
                return true;

            // Check if database is empty
            if (Features.UserRepository.GetCount(null) != 0)
                return false;

            // Create the new user and give it admin rights.
            User newUser = new User()
            {
                Username = GetUsername(),
                Domain = GetDomain(),
                IsAdmin = true,
                Description = "The very first user on the system. This user was autogenerated",
                IsEnabled = true
            };

            // Insert it into the database
            ulong id;
            Features.UserRepository.Insert(newUser, out id);
            User = Features.UserRepository.GetById(id);

            return true;            
        }
        
        public bool IsAdmin() => User.IsAdmin;
        
        public static string GetIdentity() => WindowsIdentity.GetCurrent().Name;

        public static string GetDomain() => GetIdentity().Split('\\')[0];

        public static string GetUsername() => GetIdentity().Split('\\')[1];

        public static string GetDBKey()
        {
            if (string.IsNullOrEmpty(_dbKey))
            {
                FileConfigurationHandler fileConfigurationHandler = new FileConfigurationHandler(GetDomain());
                _dbKey = fileConfigurationHandler.GetConfigValue();
            }

            return _dbKey;
        }

        public static void ClearDBKey()
        {
            _dbKey = String.Empty;
        }
    }
}
