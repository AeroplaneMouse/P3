using AMS.Models;
using System.Security.Principal;
using AMS.ConfigurationHandler;
using AMS.Database.Repositories.Interfaces;
using AMS.ViewModels;
using System;

namespace AMS.Authentication
{
    public class Session
    {
        private static string _dbKey = "";
        
        public User user;
        public Session(IUserRepository repository)
        {
            if (repository != null)
                user = repository.GetByIdentity(GetIdentity());
            else
                throw new ArgumentNullException(nameof(repository));
        }

        /// <summary>
        /// Checks wether a user is allowd access to the system, by comparing the current user
        /// with users in the database. If the database contains no users, a new users is created and given admin permissions
        /// </summary>
        /// <returns>Wether or not the current user was allowed to use the system</returns>
        public bool Authenticated()
        {
            // If user is not null, it is in the database and have access.
            if (user != null)
                return true;
            else
            {
                // Check if database is empty
                if (Features.UserRepository.GetCount(null) == 0)
                {
                    // Create the new user and give it admin rights.
                    User user = new User()
                    {
                        Username = GetUsername(),
                        Domain = GetDomain(),
                        IsAdmin = true,
                        Description = "The very first user on the system. This user was autogenerated",
                        IsEnabled = true
                    };

                    // Insert it into the database
                    ulong id;
                    Features.UserRepository.Insert(user, out id);
                    this.user = Features.UserRepository.GetById(id);

                    return true;
                }
                // User is not in the database and it is not empty
                else
                    return false;
            }
        }
        
        public bool IsAdmin() => user.IsAdmin;
        
        public static string GetIdentity() => WindowsIdentity.GetCurrent().Name;

        public static string GetDomain() => GetIdentity().Split('\\')[0];

        public static string GetUsername() => GetIdentity().Split('\\')[1];

        public static string GetDBKey()
        {
            if (string.IsNullOrEmpty(_dbKey))
            {
                FileConfigurationHandler fileConfigurationHandler = new FileConfigurationHandler(GetDomain());
                _dbKey = fileConfigurationHandler.GetConfigValue();
            }
            return _dbKey;
        }

        public static void ClearDBKey()
        {
            _dbKey = String.Empty;
        }
    }
}
