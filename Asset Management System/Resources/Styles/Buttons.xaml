<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Asset_Management_System">

    <!-- Menu button -->
    <Style TargetType="{x:Type Button}" x:Key="MenuButton" BasedOn="{StaticResource BaseStyle}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="9" />
        <Setter Property="Foreground" Value="{StaticResource BackgroundDarkBrush}" />

        <!-- Makes the content of the button a textblock -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Text="{TemplateBinding Content}" 
                                   Foreground="{StaticResource BackgroundLightBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Adds the hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundGrayBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Hoverless button -->
    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- System icon button-->
    <Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Padding" Value="1" />

    </Style>

    <!-- Navigation bar button -->
    <Style TargetType="{x:Type Button}" x:Key="NavigationButton" BasedOn="{StaticResource BaseStyle}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="9" />
        <Setter Property="Foreground" Value="{StaticResource BackgroundLightBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>

        <!-- Makes the content of the button a textblock -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Text="{TemplateBinding Content}" 
                                   Foreground="{StaticResource BackgroundLightBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Adds the hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource NavigationSelectedBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Window control button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="9" />
        <Setter Property="Foreground" Value="{StaticResource BackgroundDarkBrush}" />

        <!-- Stretches the buttons so they are bigger. Remove when changing to icon! -->
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5"/>
            </Setter.Value>
        </Setter>

        <!-- Makes the content of the button a textblock. Should be icon! -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Text="{TemplateBinding Content}"
                                   TextBlock.FontWeight="Light"
                                   Foreground="{StaticResource BackgroundLightBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Adds the hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundGrayBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Window control close button needs to be red -->
    <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CloseRedBrush}"/>
                <!--<Setter Property="Foreground" Value="{StaticResource BackgroundLightBrush}" />-->
            </Trigger>
        </Style.Triggers>

    </Style>
    
    <!-- Regular button -->
    <Style TargetType="{x:Type Button}" x:Key="RegularButton" BasedOn="{StaticResource NavigationButton}">
        <Setter Property="Background" Value="{StaticResource NavigationBackgroundBrush}"/>
        <Setter Property="Width" Value="100"/>

    </Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle  Margin="2"
                                    StrokeThickness="1"
                                    Stroke="#60000000"
                                    StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Department menu item button -->
    <Style TargetType="Button" x:Key="MenuItemDepartmentButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="35, 0, 0, 0"/>
        <Setter Property="FontFamily" Value="{StaticResource SegoeRegular}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border TextBlock.Foreground="{TemplateBinding Foreground}"
                            x:Name="Border"
                            BorderThickness="0"
                            Background="Transparent">
                        <ContentPresenter
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="35, 0, 0, 0"
                            RecognizesAccessKey="True"/>
                        <!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Background" 
                                                                      Storyboard.TargetName="Border">
                                            <EasingColorKeyFrame KeyTime="0" Value="White" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="White"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>
    
    
</ResourceDictionary>