<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Asset_Management_System">

    <!-- Menu button -->
    <Style TargetType="{x:Type Button}" x:Key="MenuButton" BasedOn="{StaticResource BaseStyle}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="9" />
        <Setter Property="Foreground" Value="{StaticResource BackgroundDarkBrush}" />

        <!-- Makes the content of the button a textblock -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Text="{TemplateBinding Content}" 
                                   Foreground="{StaticResource BackgroundLightBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Adds the hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundGrayBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Hoverless button -->
    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- System icon button-->
    <Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Padding" Value="1" />

    </Style>

    <!-- Navigation bar button -->
    <Style TargetType="{x:Type Button}" x:Key="NavigationButton" BasedOn="{StaticResource BaseStyle}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="9" />
        <Setter Property="Foreground" Value="{StaticResource BackgroundLightBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>

        <!-- Makes the content of the button a textblock -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Text="{TemplateBinding Content}" 
                                   Foreground="{StaticResource BackgroundLightBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Adds the hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource NavigationSelectedBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Window control button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">

        <!-- So it can be clicked -->
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Foreground" Value="{StaticResource BackgroundDarkBrush}" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"/>
        
        <!-- Stretches the buttons so they are bigger. Remove when changing to icon! -->
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5"/>
            </Setter.Value>
        </Setter>

        <!-- Makes the content of the button a textblock. Should be icon! -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" 
                                   HorizontalAlignment="Center" 
                                   Text="{TemplateBinding Content}"
                                   TextBlock.FontWeight="Light"
                                   Foreground="{StaticResource BackgroundLightBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Adds the hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundGrayBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Window control close button needs to be red -->
    <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CloseRedBrush}"/>
                <!--<Setter Property="Foreground" Value="{StaticResource BackgroundLightBrush}" />-->
            </Trigger>
        </Style.Triggers>

    </Style>
    
    <!-- Regular button -->
    <Style TargetType="{x:Type Button}" x:Key="RegularButton" BasedOn="{StaticResource NavigationButton}">
        <Setter Property="Background" Value="{StaticResource NavigationBackgroundBrush}"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeSmall}"/>
    </Style>
    
    <!-- Regular cancel button -->
    <Style TargetType="Button" x:Key="RegularCancelButton" BasedOn="{StaticResource RegularButton}">
        <Setter Property="Background" Value="Red"/>
    </Style>
    
    <!-- Regular accept button -->
    <Style TargetType="Button" x:Key="RegularAcceptButton" BasedOn="{StaticResource RegularButton}">
        <Setter Property="Background" Value="Green"/>
    </Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle  Margin="2"
                                    StrokeThickness="1"
                                    Stroke="#60000000"
                                    StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Department menu item button -->
    <Style TargetType="Button" x:Key="MenuItemDepartmentButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0, 5, 0, 5"/>
        <Setter Property="FontFamily" Value="{StaticResource SegoeRegular}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border TextBlock.Foreground="{TemplateBinding Foreground}"
                            x:Name="Border"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="35, 0, 0, 0"
                            RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Remove notification button -->
    <Style TargetType="Button" x:Key="RemoveNotificationButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Content" Value="[X]"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0, 0, 10, 0"/>
        <Setter Property="FontFamily" Value="{StaticResource SegoeRegular}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>

        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderThickness="0" Background="{TemplateBinding Background}">
                        <Label Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Add Field button -->
    <Style TargetType="Button" x:Key="AddFieldButton" BasedOn="{StaticResource RegularButton}">
        <Setter Property="Command" Value="{Binding AddFieldCommand}"/>
        
    </Style>
    
</ResourceDictionary>